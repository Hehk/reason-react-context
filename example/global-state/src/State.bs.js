// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
"use strict";

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonReactContext = require("reason-react-context/src/ReasonReactContext.bs.js");
var Utils$ReactTemplate = require("./Utils.bs.js");

function initialState() {
  return /* record */ [/* todos : [] */ 0, /* input */ ""];
}

function defaultValue_000() {
  console.log("State has not mounted yet");
  return /* () */ 0;
}

var defaultValue_001 = /* state : record */ [
  /* todos : [] */ 0,
  /* input */ ""
];

var defaultValue = /* record */ [defaultValue_000, defaultValue_001];

var Context = ReasonReactContext.CreateContext(
  /* module */ [/* name */ "GlobalState", /* defaultValue */ defaultValue]
);

var component = ReasonReact.reducerComponent("State");

function make(children) {
  var newrecord = component.slice();
  newrecord[/* render */ 9] = function(param) {
    return ReasonReact.element(
      /* None */ 0,
      /* None */ 0,
      Curry._2(
        Context[/* Provider */ 4][/* make */ 1],
        /* Some */ [
          /* record */ [
            /* send */ param[/* send */ 3],
            /* state */ param[/* state */ 1]
          ]
        ],
        children
      )
    );
  };
  newrecord[/* initialState */ 10] = initialState;
  newrecord[/* reducer */ 12] = function(action, state) {
    if (typeof action === "number") {
      return /* Update */ Block.__(0, [
        /* record */ [
          /* todos : :: */ [
            /* record */ [
              /* content */ state[/* input */ 1],
              /* complete : false */ 0,
              /* id */ Utils$ReactTemplate.uniqueId(/* () */ 0)
            ],
            state[/* todos */ 0]
          ],
          /* input */ ""
        ]
      ]);
    } else if (action.tag) {
      var id = action[0];
      var __x = state[/* todos */ 0];
      return /* Update */ Block.__(0, [
        /* record */ [
          /* todos */ Belt_List.map(__x, function(todo) {
            var match = +(id === todo[/* id */ 2]);
            if (match !== 0) {
              return /* record */ [
                /* content */ todo[/* content */ 0],
                /* complete */ 1 - todo[/* complete */ 1],
                /* id */ todo[/* id */ 2]
              ];
            } else {
              return todo;
            }
          }),
          /* input */ state[/* input */ 1]
        ]
      ]);
    } else {
      return /* Update */ Block.__(0, [
        /* record */ [/* todos */ state[/* todos */ 0], /* input */ action[0]]
      ]);
    }
  };
  return newrecord;
}

var Consumer = 0;

exports.initialState = initialState;
exports.Context = Context;
exports.component = component;
exports.make = make;
exports.Consumer = Consumer;
/* Context Not a pure module */
