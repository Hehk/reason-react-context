// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
"use strict";

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var passThrough = props => props.children;

function make(children) {
  return ReasonReact.wrapJsForReason(passThrough, {}, children);
}

var RenderChildren = /* module */ [
  /* passThrough */ passThrough,
  /* make */ make
];

function CreateContext(C) {
  var state = [C[/* defaultValue */ 1]];
  var subscriptions = [/* [] */ 0];
  var addSubscription = function(f) {
    subscriptions[0] = /* :: */ [f, subscriptions[0]];
    return function() {
      subscriptions[0] = List.filter(function(sub) {
        return sub !== f;
      })(subscriptions[0]);
      return /* () */ 0;
    };
  };
  var updateState = function(newStateOpt) {
    var newState = newStateOpt ? newStateOpt[0] : C[/* defaultValue */ 1];
    state[0] = newState;
    return List.iter(function(f) {
      return Curry._1(f, newState);
    }, subscriptions[0]);
  };
  var component = ReasonReact.statelessComponent(
    C[/* name */ 0] + "ContextProvider"
  );
  var make$1 = function(value, children) {
    return /* record */ [
      /* debugName */ component[/* debugName */ 0],
      /* reactClassInternal */ component[/* reactClassInternal */ 1],
      /* handedOffState */ component[/* handedOffState */ 2],
      /* willReceiveProps */ function() {
        return updateState(value);
      },
      /* didMount */ function() {
        updateState(value);
        return /* () */ 0;
      },
      /* didUpdate */ component[/* didUpdate */ 5],
      /* willUnmount */ component[/* willUnmount */ 6],
      /* willUpdate */ component[/* willUpdate */ 7],
      /* shouldUpdate */ component[/* shouldUpdate */ 8],
      /* render */ function() {
        return ReasonReact.element(/* None */ 0, /* None */ 0, make(children));
      },
      /* initialState */ component[/* initialState */ 10],
      /* retainedProps */ component[/* retainedProps */ 11],
      /* reducer */ component[/* reducer */ 12],
      /* subscriptions */ component[/* subscriptions */ 13],
      /* jsElementWrapped */ component[/* jsElementWrapped */ 14]
    ];
  };
  var Provider = /* module */ [/* component */ component, /* make */ make$1];
  var component$1 = ReasonReact.reducerComponent(
    C[/* name */ 0] + "ContextConsumer"
  );
  var make$2 = function(children) {
    return /* record */ [
      /* debugName */ component$1[/* debugName */ 0],
      /* reactClassInternal */ component$1[/* reactClassInternal */ 1],
      /* handedOffState */ component$1[/* handedOffState */ 2],
      /* willReceiveProps */ component$1[/* willReceiveProps */ 3],
      /* didMount */ component$1[/* didMount */ 4],
      /* didUpdate */ component$1[/* didUpdate */ 5],
      /* willUnmount */ component$1[/* willUnmount */ 6],
      /* willUpdate */ component$1[/* willUpdate */ 7],
      /* shouldUpdate */ component$1[/* shouldUpdate */ 8],
      /* render */ function(param) {
        return Curry._1(children, param[/* state */ 1]);
      },
      /* initialState */ function() {
        return state[0];
      },
      /* retainedProps */ component$1[/* retainedProps */ 11],
      /* reducer */ function(action, _) {
        return /* Update */ Block.__(0, [action[0]]);
      },
      /* subscriptions */ function(param) {
        var send = param[/* send */ 3];
        return /* :: */ [
          /* Sub */ [
            function() {
              return addSubscription(function(newState) {
                return Curry._1(send, /* ChangeState */ [newState]);
              });
            },
            function(unSub) {
              return Curry._1(unSub, /* () */ 0);
            }
          ],
          /* [] */ 0
        ];
      },
      /* jsElementWrapped */ component$1[/* jsElementWrapped */ 14]
    ];
  };
  var Consumer = /* module */ [/* component */ component$1, /* make */ make$2];
  return /* module */ [
    /* state */ state,
    /* subscriptions */ subscriptions,
    /* addSubscription */ addSubscription,
    /* updateState */ updateState,
    /* Provider */ Provider,
    /* Consumer */ Consumer
  ];
}

exports.RenderChildren = RenderChildren;
exports.CreateContext = CreateContext;
/* passThrough Not a pure module */
