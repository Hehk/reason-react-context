// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
"use strict";

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Enzyme = require("bs-enzyme/src/Enzyme.js");
var Enzyme$1 = require("enzyme");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonReactContext = require("../src/ReasonReactContext.bs.js");
var EnzymeAdapterReact = require("enzyme-adapter-react-16");

Enzyme.configureEnzyme(new EnzymeAdapterReact());

describe("Creating and updating", function() {
  var Context = ReasonReactContext.CreateContext(
    /* module */ [
      /* name */ "Counter",
      /* defaultValue : record */ [/* count */ 0]
    ]
  );
  Jest.test("Provider renders", function() {
    return Jest.Expect[/* toBe */ 2](
      /* true */ 1,
      Jest.Expect[/* expect */ 0](
        +Enzyme$1.shallow(
          ReasonReact.element(
            /* None */ 0,
            /* None */ 0,
            Curry._2(
              Context[/* Provider */ 4][/* make */ 1],
              /* None */ 0,
              /* array */ []
            )
          )
        ).exists()
      )
    );
  });
  var consumerCount = [-1];
  var consumer = Enzyme$1.shallow(
    ReasonReact.element(
      /* None */ 0,
      /* None */ 0,
      Curry._1(Context[/* Consumer */ 5][/* make */ 1], function(param) {
        consumerCount[0] = param[/* count */ 0];
        return "test";
      })
    )
  );
  Jest.test("Consumer renders", function() {
    return Jest.Expect[/* toBe */ 2](
      0,
      Jest.Expect[/* expect */ 0](consumerCount[0])
    );
  });
  Jest.test(
    "Change count on provider and it is mirrored in consumer",
    function() {
      Enzyme$1.shallow(
        ReasonReact.element(
          /* None */ 0,
          /* None */ 0,
          Curry._2(
            Context[/* Provider */ 4][/* make */ 1],
            /* Some */ [/* record */ [/* count */ 10]],
            /* array */ []
          )
        )
      );
      return Jest.Expect[/* toBe */ 2](
        10,
        Jest.Expect[/* expect */ 0](consumerCount[0])
      );
    }
  );
  Jest.test("context subscription count should only be 1", function() {
    return Jest.Expect[/* toBe */ 2](
      1,
      Jest.Expect[/* expect */ 0](
        List.length(Context[/* subscriptions */ 1][0])
      )
    );
  });
  return Jest.test(
    "Consumer unmounts and the context clears the subscription",
    function() {
      consumer.unmount();
      return Jest.Expect[/* toBe */ 2](
        0,
        Jest.Expect[/* expect */ 0](
          List.length(Context[/* subscriptions */ 1][0])
        )
      );
    }
  );
});

describe("Send consumption", function() {
  var C_001 = /* defaultValue : record */ [/* count */ -1];
  var C = /* module */ [/* name */ "Counter", C_001];
  var ContextWithSend = ReasonReactContext.CreateContextWithSendConsumption(C);
  var state = [/* record */ [/* count */ -1]];
  var send = function(action) {
    state[0] = /* record */ [/* count */ action[0]];
    return /* () */ 0;
  };
  Jest.test("Provider renders", function() {
    return Jest.Expect[/* toBe */ 2](
      /* true */ 1,
      Jest.Expect[/* expect */ 0](
        +Enzyme$1.shallow(
          ReasonReact.element(
            /* None */ 0,
            /* None */ 0,
            Curry._3(
              ContextWithSend[/* Provider */ 6][/* make */ 1],
              /* None */ 0,
              send,
              /* array */ []
            )
          )
        ).exists()
      )
    );
  });
  var receivedCount = [-2];
  var consumer = Enzyme$1.shallow(
    ReasonReact.element(
      /* None */ 0,
      /* None */ 0,
      Curry._1(ContextWithSend[/* Consumer */ 7][/* make */ 1], function(
        param,
        send
      ) {
        receivedCount[0] = param[/* count */ 0];
        Curry._1(send, /* SetCount */ [0]);
        return "test";
      })
    )
  );
  Jest.test("Consumer renders ", function() {
    return Jest.Expect[/* toBe */ 2](
      /* true */ 1,
      Jest.Expect[/* expect */ 0](+consumer.exists())
    );
  });
  Jest.test("Consumer received the right state", function() {
    return Jest.Expect[/* toBe */ 2](
      -1,
      Jest.Expect[/* expect */ 0](receivedCount[0])
    );
  });
  Jest.test("send works", function() {
    return Jest.Expect[/* toBe */ 2](
      0,
      Jest.Expect[/* expect */ 0](state[0][/* count */ 0])
    );
  });
  return Jest.test("sending new count is mirrored in consumer", function() {
    send(/* SetCount */ [10]);
    Enzyme$1.shallow(
      ReasonReact.element(
        /* None */ 0,
        /* None */ 0,
        Curry._3(
          ContextWithSend[/* Provider */ 6][/* make */ 1],
          /* Some */ [state[0]],
          send,
          /* array */ []
        )
      )
    );
    return Jest.Expect[/* toBe */ 2](
      10,
      Jest.Expect[/* expect */ 0](receivedCount[0])
    );
  });
});

/*  Not a pure module */
