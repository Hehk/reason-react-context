// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Enzyme = require("bs-enzyme/src/Enzyme.js");
var Enzyme$1 = require("enzyme");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var EnzymeAdapterReact = require("enzyme-adapter-react-16");
var ReasonReactContext$ReasonReactContext = require("../src/reasonReactContext.bs.js");

Enzyme.configureEnzyme(new EnzymeAdapterReact());

describe("Creating and updating", (function () {
        var Context = ReasonReactContext$ReasonReactContext.CreateContext(/* module */[
              /* name */"Counter",
              /* defaultValue : record */[/* count */0]
            ]);
        Jest.test("Provider renders", (function () {
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](+Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Context[/* Provider */4][/* make */1], /* None */0, /* array */[]))).exists()));
              }));
        Jest.test("Consumer renders", (function () {
                var x = [-1];
                Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._1(Context[/* Consumer */5][/* make */1], (function (param) {
                                x[0] = param[/* count */0];
                                return "test";
                              }))));
                return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](x[0]));
              }));
        return Jest.test("Change count on provider and it is mirrored in consumer", (function () {
                      var x = [-1];
                      Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Context[/* Provider */4][/* make */1], /* Some */[/* record */[/* count */10]], /* array */[])));
                      Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._1(Context[/* Consumer */5][/* make */1], (function (param) {
                                      x[0] = param[/* count */0];
                                      return "test";
                                    }))));
                      return Jest.Expect[/* toBe */2](10, Jest.Expect[/* expect */0](x[0]));
                    }));
      }));

/*  Not a pure module */
